import SwiftUI
import CoreLocation
import UIKit

struct ContentView: View {
    @StateObject private var cameraManager = CameraManager()
    @StateObject private var bluetoothManager = BluetoothCameraManager()
    @StateObject private var locationManager = LocationManager()
    @StateObject private var locationService = LocationService()
    @State private var showAlert = false
    @State private var alertMessage = ""
    @State private var selectedTab = 0
    @State private var useBluetoothMode = true
    @State private var showWiFiSettings = false
    @State private var wifiSSID = ""
    @State private var wifiPassword = ""
    @State private var showDebugLog = false
    
    var body: some View {
        TabView {
            // Ìôà ÌôîÎ©¥
            VStack(spacing: 30) {
                Image(systemName: "camera.metering.matrix")
                    .font(.system(size: 100))
                    .foregroundColor(.blue)
                
                Text("PhotoPin Mobile")
                    .font(.largeTitle)
                    .bold()
                
                HStack(spacing: 50) {
                    VStack {
                        Image(systemName: useBluetoothMode ? 
                              (bluetoothManager.isWiFiConnected ? "wifi" : "wifi.slash") :
                              (cameraManager.isConnected ? "wifi" : "wifi.slash"))
                            .font(.title)
                            .foregroundColor(useBluetoothMode ? 
                                           (bluetoothManager.isWiFiConnected ? .green : .gray) :
                                           (cameraManager.isConnected ? .green : .gray))
                        Text(useBluetoothMode ?
                            (bluetoothManager.isWiFiConnected ? "Ïó∞Í≤∞Îê®" : "ÎØ∏Ïó∞Í≤∞") :
                            (cameraManager.isConnected ? "Ïó∞Í≤∞Îê®" : "ÎØ∏Ïó∞Í≤∞"))
                            .font(.caption)
                    }
                    
                    VStack {
                        Image(systemName: locationManager.isTracking ? "location.fill" : "location")
                            .font(.title)
                            .foregroundColor(locationManager.isTracking ? .green : .gray)
                        Text(locationManager.isTracking ? "Ï∂îÏ†ÅÏ§ë" : "ÎåÄÍ∏∞")
                            .font(.caption)
                    }
                }
                
                Text("Ï¥¨ÏòÅ: \(cameraManager.photoCount)Ïû•")
                    .font(.title2)
                    .padding()
                    .background(Color.blue.opacity(0.1))
                    .cornerRadius(10)
            }
            .tabItem {
                Label("Ìôà", systemImage: "house.fill")
            }
            
            // Ïπ¥Î©îÎùº ÌôîÎ©¥
            VStack(spacing: 30) {
                // Ïó∞Í≤∞ Î™®Îìú ÏÑ†ÌÉù
                Picker("Ïó∞Í≤∞ Î™®Îìú", selection: $useBluetoothMode) {
                    Text("Bluetooth ‚Üí Wi-Fi").tag(true)
                    Text("Wi-Fi ÏßÅÏ†ë Ïó∞Í≤∞").tag(false)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding(.horizontal)
                
                Image(systemName: useBluetoothMode ? "dot.radiowaves.left.and.right" : "wifi")
                    .font(.system(size: 60))
                    .foregroundColor(useBluetoothMode ? 
                                   (bluetoothManager.isWiFiConnected ? .green : .gray) :
                                   (cameraManager.isConnected ? .green : .gray))
                
                Text(useBluetoothMode ? bluetoothManager.cameraInfo : cameraManager.cameraInfo)
                    .font(.headline)
                    .foregroundColor(.secondary)
                
                if useBluetoothMode {
                    // Bluetooth Î™®Îìú
                    if !bluetoothManager.isBluetoothConnected {
                        VStack(spacing: 15) {
                            Text("Phocus Ïä§ÌÉÄÏùº Ïó∞Í≤∞:")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            Text("1. Ïπ¥Î©îÎùº Bluetooth ON\n2. ÏûêÎèôÏúºÎ°ú Wi-Fi ÌôúÏÑ±Ìôî\n3. ÏûêÎèô Ïó∞Í≤∞")
                                .font(.caption2)
                                .multilineTextAlignment(.center)
                                .foregroundColor(.secondary)
                            
                            Button(action: {
                                bluetoothManager.startScanning()
                            }) {
                                Text(bluetoothManager.isScanning ? "Í≤ÄÏÉâ Ï§ë..." : "Ïπ¥Î©îÎùº Í≤ÄÏÉâ")
                                    .padding()
                                    .frame(width: 200)
                                    .background(bluetoothManager.isScanning ? Color.gray : Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                            .disabled(bluetoothManager.isScanning)
                            
                            // Hasselblad Ïπ¥Î©îÎùº Ïö∞ÏÑ† ÌëúÏãú
                            if !bluetoothManager.discoveredDevices.isEmpty {
                                VStack(alignment: .leading, spacing: 10) {
                                    Text("üéØ Hasselblad Ïπ¥Î©îÎùº:")
                                        .font(.caption)
                                        .bold()
                                        .foregroundColor(.green)
                                    
                                    ForEach(bluetoothManager.discoveredDevices, id: \.identifier) { device in
                                        Button(action: {
                                            bluetoothManager.connectToDevice(device)
                                        }) {
                                            HStack {
                                                Image(systemName: "camera.fill")
                                                    .foregroundColor(.green)
                                                Text(device.name ?? "Hasselblad X2D II")
                                                    .font(.body)
                                                    .bold()
                                                Spacer()
                                                Image(systemName: "chevron.right")
                                                    .foregroundColor(.gray)
                                            }
                                            .padding()
                                            .background(Color.green.opacity(0.1))
                                            .cornerRadius(10)
                                        }
                                    }
                                }
                                .padding(.horizontal)
                            }
                            
                            // Í∏∞ÌÉÄ Î∞úÍ≤¨Îêú Ïû•Ïπò Î™©Î°ù
                            if !bluetoothManager.allDiscoveredDevices.isEmpty && bluetoothManager.discoveredDevices.isEmpty {
                                VStack(alignment: .leading, spacing: 5) {
                                    Text("Î∞úÍ≤¨Îêú Ïû•Ïπò:")
                                        .font(.caption)
                                        .bold()
                                    
                                    ScrollView {
                                        VStack(alignment: .leading, spacing: 3) {
                                            ForEach(bluetoothManager.allDiscoveredDevices, id: \.peripheral.identifier) { device in
                                                Button(action: {
                                                    bluetoothManager.connectToDevice(device.peripheral)
                                                }) {
                                                    HStack {
                                                        Text(device.name)
                                                            .font(.caption2)
                                                        Spacer()
                                                        Text("RSSI: \(device.rssi)")
                                                            .font(.caption2)
                                                            .foregroundColor(.gray)
                                                    }
                                                    .padding(.horizontal, 10)
                                                    .padding(.vertical, 5)
                                                    .background(Color.gray.opacity(0.1))
                                                    .cornerRadius(5)
                                                }
                                            }
                                        }
                                    }
                                    .frame(maxHeight: 150)
                                }
                                .padding(.horizontal)
                            }
                            
                            if bluetoothManager.isBluetoothConnected && !bluetoothManager.isWiFiConnected {
                                VStack(spacing: 15) {
                                    ProgressView("Wi-Fi ÌôúÏÑ±Ìôî Ï§ë...")
                                        .padding()
                                    
                                    Text("üì∂ Ïπ¥Î©îÎùº Wi-Fi ÏÑ§Ï†ï")
                                        .font(.headline)
                                    
                                    VStack(alignment: .leading, spacing: 10) {
                                        Text("Ïπ¥Î©îÎùº ÌôîÎ©¥ÏóêÏÑú:")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                        Text("1. Menu ‚Üí Wi-Fi")
                                            .font(.caption2)
                                        Text("2. Remote Control ÏÑ†ÌÉù")
                                            .font(.caption2)
                                        Text("3. ÌëúÏãúÎêòÎäî SSID ÌôïÏù∏")
                                            .font(.caption2)
                                            .foregroundColor(.blue)
                                    }
                                    .padding()
                                    .background(Color.gray.opacity(0.1))
                                    .cornerRadius(8)
                                    
                                    // WiFi SSID ÏûÖÎ†• (ÎπÑÎ∞ÄÎ≤àÌò∏ Î∂àÌïÑÏöî)
                                    VStack(spacing: 10) {
                                        TextField("WiFi SSID (Ïòà: X2D-II-100C-003635)", text: $wifiSSID)
                                            .textFieldStyle(RoundedBorderTextFieldStyle())
                                            .autocapitalization(.none)
                                        
                                        Text("üí° Ïπ¥Î©îÎùº WiFiÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏóÜÏäµÎãàÎã§")
                                            .font(.caption2)
                                            .foregroundColor(.gray)
                                        
                                        Button(action: {
                                            bluetoothManager.setWiFiCredentials(ssid: wifiSSID, password: "")
                                        }) {
                                            Text("ÏûêÎèô Ïó∞Í≤∞ ÏãúÎèÑ")
                                                .padding()
                                                .frame(maxWidth: .infinity)
                                                .background(!wifiSSID.isEmpty ? Color.green : Color.gray)
                                                .foregroundColor(.white)
                                                .cornerRadius(10)
                                        }
                                        .disabled(wifiSSID.isEmpty)
                                    }
                                    .padding(.horizontal)
                                    
                                    // ÏàòÎèô ÏÑ§Ï†ï Ïó¥Í∏∞ Î≤ÑÌäº
                                    Button(action: {
                                        if let url = URL(string: UIApplication.openSettingsURLString) {
                                            UIApplication.shared.open(url)
                                        }
                                    }) {
                                        Text("ÏàòÎèôÏúºÎ°ú ÏÑ§Ï†ï Ïï± Ïó¥Í∏∞")
                                            .font(.caption)
                                            .padding()
                                            .background(Color.blue)
                                            .foregroundColor(.white)
                                            .cornerRadius(10)
                                    }
                                }
                                .padding()
                            }
                        }
                    } else if bluetoothManager.isWiFiConnected {
                        Text("Hasselblad X2D II")
                            .font(.title2)
                        
                        Button(action: {
                            bluetoothManager.capturePhoto(with: locationManager.currentLocation)
                            alertMessage = "Ï¥¨ÏòÅ ÏôÑÎ£å!\nGPS: \(locationManager.currentLocation != nil ? "Ìè¨Ìï®Îê®" : "ÏóÜÏùå")"
                            showAlert = true
                        }) {
                            Text("üì∏ Ï¥¨ÏòÅ")
                                .padding()
                                .frame(width: 200)
                                .background(Color.green)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        
                        Button(action: {
                            bluetoothManager.disconnect()
                        }) {
                            Text("Ïó∞Í≤∞ Ìï¥Ï†ú")
                                .padding()
                                .frame(width: 200)
                                .background(Color.red)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                    }
                } else {
                    // Wi-Fi ÏßÅÏ†ë Ïó∞Í≤∞ Î™®Îìú
                    if !cameraManager.isConnected {
                        VStack(spacing: 15) {
                            Text("Ïπ¥Î©îÎùº Wi-Fi Ïó∞Í≤∞ Î∞©Î≤ï:")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            Text("1. Ïπ¥Î©îÎùº Wi-Fi ÏºúÍ∏∞\n2. iPhone Wi-Fi ÏÑ§Ï†ïÏóêÏÑú Ïπ¥Î©îÎùº ÏÑ†ÌÉù\n3. ÏïÑÎûò Î≤ÑÌäº ÌÅ¥Î¶≠")
                                .font(.caption2)
                                .multilineTextAlignment(.center)
                                .foregroundColor(.secondary)
                            
                            Button(action: {
                                cameraManager.connectToCamera()
                            }) {
                                Text("Ïπ¥Î©îÎùº Ïó∞Í≤∞")
                                    .padding()
                                    .frame(width: 200)
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                        }
                    } else {
                        Text("Hasselblad X2D")
                            .font(.title2)
                        
                        Button(action: {
                            cameraManager.capturePhoto(with: locationManager.currentLocation)
                            alertMessage = "Ï¥¨ÏòÅ ÏôÑÎ£å!\nGPS: \(locationManager.currentLocation != nil ? "Ìè¨Ìï®Îê®" : "ÏóÜÏùå")"
                            showAlert = true
                        }) {
                            Text("üì∏ Ï¥¨ÏòÅ")
                                .padding()
                                .frame(width: 200)
                                .background(Color.green)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        
                        Button(action: {
                            cameraManager.disconnect()
                        }) {
                            Text("Ïó∞Í≤∞ Ìï¥Ï†ú")
                                .padding()
                                .frame(width: 200)
                                .background(Color.red)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                    }
                }
            }
            .alert("ÏïåÎ¶º", isPresented: $showAlert) {
                Button("OK") { }
            } message: {
                Text(alertMessage)
            }
            .tabItem {
                Label("Ïπ¥Î©îÎùº", systemImage: "camera.fill")
            }
            
            // GPS ÌôîÎ©¥
            VStack(spacing: 30) {
                Image(systemName: "location.circle.fill")
                    .font(.system(size: 60))
                    .foregroundColor(locationManager.isTracking ? .green : .gray)
                
                Text(locationManager.isTracking ? "GPS Ï∂îÏ†Å Ï§ë..." : "GPS ÎåÄÍ∏∞")
                    .font(.title2)
                
                Text(locationManager.locationString)
                    .font(.system(.body, design: .monospaced))
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(8)
                
                // ÏúÑÏπò Ï†ÑÏÜ° ÏÉÅÌÉú
                if locationService.isTransmitting {
                    VStack(spacing: 10) {
                        HStack {
                            ProgressView()
                                .scaleEffect(0.8)
                            Text("Ïπ¥Î©îÎùºÎ°ú Ï†ÑÏÜ° Ï§ë")
                                .font(.caption)
                                .foregroundColor(.green)
                        }
                        
                        Text("Ïó∞Í≤∞: \(locationService.connectionType)")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                        
                        Text(locationService.transmissionStatus)
                            .font(.caption2)
                            .foregroundColor(.secondary)
                    }
                    .padding()
                    .background(Color.green.opacity(0.1))
                    .cornerRadius(8)
                }
                
                if locationManager.authorizationStatus == .notDetermined {
                    Button(action: {
                        locationManager.requestPermission()
                    }) {
                        Text("ÏúÑÏπò Í∂åÌïú ÏöîÏ≤≠")
                            .padding()
                            .frame(width: 200)
                            .background(Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                } else {
                    VStack(spacing: 15) {
                        Button(action: {
                            if locationManager.isTracking {
                                locationManager.stopTracking()
                            } else {
                                locationManager.startTracking()
                            }
                        }) {
                            Text(locationManager.isTracking ? "GPS Ï§ëÏßÄ" : "GPS ÏãúÏûë")
                                .padding()
                                .frame(width: 200)
                                .background(locationManager.isTracking ? Color.red : Color.green)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        
                        // Ïπ¥Î©îÎùºÎ°ú ÏúÑÏπò Ï†ÑÏÜ° Î≤ÑÌäº
                        Button(action: {
                            if locationService.isTransmitting {
                                locationService.stopTransmitting()
                            } else {
                                // WiFi Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
                                if bluetoothManager.isWiFiConnected || cameraManager.isConnected {
                                    locationService.startTransmitting()
                                } else {
                                    alertMessage = "Î®ºÏ†Ä Ïπ¥Î©îÎùº WiFiÏóê Ïó∞Í≤∞ÌïòÏÑ∏Ïöî"
                                    showAlert = true
                                }
                            }
                        }) {
                            Text(locationService.isTransmitting ? "Ï†ÑÏÜ° Ï§ëÏßÄ" : "Ïπ¥Î©îÎùºÎ°ú Ï†ÑÏÜ°")
                                .padding()
                                .frame(width: 200)
                                .background(locationService.isTransmitting ? Color.orange : Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        .disabled(!locationManager.isTracking)
                    }
                }
            }
            .alert("ÏïåÎ¶º", isPresented: $showAlert) {
                Button("OK") { }
            } message: {
                Text(alertMessage)
            }
            .tabItem {
                Label("GPS", systemImage: "location.fill")
            }
            
            // ÎîîÎ≤ÑÍ∑∏ ÌôîÎ©¥
            VStack {
                HStack {
                    Text("ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏")
                        .font(.headline)
                    Spacer()
                    Button(action: {
                        bluetoothManager.debugLog = ""
                    }) {
                        Text("ÌÅ¥Î¶¨Ïñ¥")
                            .font(.caption)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 5)
                            .background(Color.red)
                            .foregroundColor(.white)
                            .cornerRadius(5)
                    }
                }
                .padding()
                
                ScrollView {
                    ScrollViewReader { proxy in
                        VStack(alignment: .leading, spacing: 2) {
                            Text(bluetoothManager.debugLog.isEmpty ? "Î°úÍ∑∏Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§" : bluetoothManager.debugLog)
                                .font(.system(size: 10, design: .monospaced))
                                .padding()
                                .id("bottom")
                        }
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .onChange(of: bluetoothManager.debugLog) { _ in
                            withAnimation {
                                proxy.scrollTo("bottom", anchor: .bottom)
                            }
                        }
                    }
                }
                .background(Color.black.opacity(0.05))
                .cornerRadius(8)
                .padding(.horizontal)
                
                // WiFi ÏÉÅÌÉú ÌëúÏãú
                HStack {
                    VStack(alignment: .leading, spacing: 5) {
                        Text("ÌòÑÏû¨ WiFi SSID:")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text(bluetoothManager.wifiSSID.isEmpty ? "ÏóÜÏùå" : bluetoothManager.wifiSSID)
                            .font(.caption)
                            .bold()
                    }
                    Spacer()
                    VStack(alignment: .trailing, spacing: 5) {
                        Text("Ïó∞Í≤∞ ÏÉÅÌÉú:")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        HStack {
                            Circle()
                                .fill(bluetoothManager.isWiFiConnected ? Color.green : Color.red)
                                .frame(width: 10, height: 10)
                            Text(bluetoothManager.isWiFiConnected ? "Ïó∞Í≤∞Îê®" : "ÎØ∏Ïó∞Í≤∞")
                                .font(.caption)
                                .bold()
                        }
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(8)
                .padding(.horizontal)
                
                // ÏàòÎèô WiFi Ï†ïÎ≥¥ ÏöîÏ≤≠ Î≤ÑÌäº
                Button(action: {
                    bluetoothManager.requestWiFiInfo()
                }) {
                    Text("Ïπ¥Î©îÎùºÏóêÏÑú WiFi Ï†ïÎ≥¥ ÏöîÏ≤≠")
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(bluetoothManager.isBluetoothConnected ? Color.blue : Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .disabled(!bluetoothManager.isBluetoothConnected)
                .padding(.horizontal)
            }
            .tabItem {
                Label("ÎîîÎ≤ÑÍ∑∏", systemImage: "ant.fill")
            }
        }
    }
}